{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import * as tf from \"@tensorflow/tfjs\";\n  import * as tmImage from \"@teachablemachine/image\";\n // import Webcam from 'webcam-easy';\n\n  let videoEl;\n  let errorMessage;\n  let model;\n  let loading = true;\n  let percentage = \"\";\n  let name = \"\";\n\nconst button = document.getElementById('button');\nconst select = document.getElementById('select');\n\n\n  const URL = \"model00/\";\n  const modelURL = URL + \"model.json\";\n  const metadataURL = URL + \"metadata.json\";\n\nconst constraints = { \n      video: true, \n     facingMode:  { exact: 'environment' }\n}\n\n  onMount(async () => {\n    try {\n      model = await tmImage.load(modelURL, metadataURL);\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      videoEl.srcObject = stream;\n      videoEl.play();\n      setInterval(predict, 1000);\n      loading = false;\n    } catch (e) {\n      console.error(e, \"camera access denied\");\n      errorMessage = \"Kamera nie podÅ‚Ä…czona i nie dziaÅ‚a :(\";\n    }\n  });\n\n  async function predict() {\n    const predictions = await model.predict(videoEl);\n    const [choosenPrediction] = predictions.sort(\n      (a, b) => b.probability - a.probability\n    );\n\n    //console.log(predictions);\n\n    if (choosenPrediction) {\n      percentage = (choosenPrediction.probability * 100).toFixed(2) + \"%\";\n      name = classNameToLabel(choosenPrediction.className);\n    }\n  }\n  function classNameToLabel(className) {\n    switch (className) {\n      case \"Pik\":\n        return \"kartÄ™ Pik\";\n      case \"Kier\":\n        return \"kartÄ™ Kier\";\n      case \"Karo\":\n        return \"kartÄ™ Karo\";\n      case \"Trefl\":\n        return \"kartÄ™ Trefl\";\n      default:\n        return \"Nic....\";\n    }\n  }\n</script>\n\n<style>\n  main {\n    width: 95%;\n    height: 90vh;\n    padding: 0;\n    box-sizing: border-box;\n    position: absolute;\n  }\n  video {\n    display: block;\n    margin: 20px auto;\n  }\n  h1,\n  h2 {\n    text-align: center;\n  }\n  h1 {\n    font-size: 40px;\n  }\n  h2 {\n    font-size: 20px;\n  }\n  .pep {\n    text-align: right;\n    padding-top: 1rem;\n    font-size: 12px;\n  }\n  a {\n    text-decoration: none;\n  }\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>\n    WyciÄ…gnij Asa z rÄ™kawa\n    <br />\n    â™ \n    <snap style=\"color:red;\">â™¦</snap>\n    â™£\n    <snap style=\"color:red;\">â™¥</snap>\n    ãƒ„ ðŸ˜Ž\n  </h1>\n  <video bind:this={videoEl} width=\"330\" height=\"300\" />\n  {#if errorMessage}\n    <h2 style=\"color: red;\">{errorMessage}</h2>\n  {:else if loading}\n    <h2>Å‚aduje ... . .</h2>\n  {:else if percentage && name}\n    <h2>Wykryto {name} w {percentage}</h2>\n  {/if}\n  <br />\n  <br />\n    <div class=\"pep\">\n    Prosta aplikacja ML/AI, ktÃ³ra wykrywa przy pomocy kamery internetowej rodzaj\n    <a\n      href=\"https://pl.wikipedia.org/wiki/Karty\"\n      alt=\"Wikipedia opis kart do gry\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">\n      karty do gry.\n    </a>\n    <br />\n    Aplikacja napisana przy uÅ¼yciu frameworka\n    <a\n      href=\"https://svelte.dev\"\n      alt=\"Svelte website\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">\n      Svelte.js\n    </a>\n    oraz biblioteki\n    <a\n      href=\"https://www.tensorflow.org/\"\n      alt=\"Website Tensorflow Google\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">\n      TF.js/tensorflow.keras.\n    </a>\n    <br />\n    Model zostaÅ‚ wytrenowany na 30 zdjÄ™ciach dla kaÅ¼dej z czterech figur/karty,\n    w tym wypadku byÅ‚y to Asy.\n    <br />\n    Model doÅ›Ä‡ dobrze radzi sobie, rÃ³wnieÅ¼ z innymi kartami tego samego koloru -\n    zapraszam od zabawy ãƒ„\n    <br />\n    <a\n      href=\"https://trochymiak.net\"\n      alt=\"website Piotr Trochymiak\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">\n      ^p^\n    </a>\n  </div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAuEE,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AACD,gBAAE,CACF,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,CAAC,cAAC,CAAC,AACD,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}